// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"

export interface Data {
  success: boolean;
  build: Build;
}

export interface Build {
  name: string;
  class: string;
  dualClass: null;
  level: number;
  ancestry: string;
  heritage: string;
  background: string;
  alignment: string;
  gender: string;
  age: string;
  deity: string;
  size: number;
  sizeName: string;
  keyability: string;
  languages: any[];
  rituals: any[];
  resistances: any[];
  attributes: Attributes;
  abilities: Abilities;
  proficiencies: { [key: string]: number };
  mods: Mods;
  feats: Array<Array<number | null | string>>;
  specials: string[];
  lores: Array<Array<number | string>>;
  equipmentContainers: EquipmentContainers;
  equipment: any[];
  specificProficiencies: SpecificProficiencies;
  weapons: any[];
  money: Money;
  armor: Armor[];
  spellCasters: SpellCaster[];
  focusPoints: number;
  focus: Focus;
  formula: any[];
  acTotal: ACTotal;
  pets: any[];
  familiars: any[];
}

export interface Abilities {
  str: number;
  dex: number;
  con: number;
  int: number;
  wis: number;
  cha: number;
  breakdown: Breakdown;
}

export interface Breakdown {
  ancestryFree: string[];
  ancestryBoosts: any[];
  ancestryFlaws: any[];
  backgroundBoosts: string[];
  classBoosts: string[];
  mapLevelledBoosts: { [key: string]: string[] };
}

export interface ACTotal {
  acProfBonus: number;
  acAbilityBonus: number;
  acItemBonus: number;
  acTotal: number;
  shieldBonus: string;
}

export interface Armor {
  name: string;
  qty: number;
  prof: string;
  pot: number;
  res: string;
  mat: null;
  display: string;
  worn: boolean;
  runes: any[];
}

export interface Attributes {
  ancestryhp: number;
  classhp: number;
  bonushp: number;
  bonushpPerLevel: number;
  speed: number;
  speedBonus: number;
}

export interface EquipmentContainers {}

export interface Focus {
  occult: Occult;
}

export interface Occult {
  wis: Wis;
}

export interface Wis {
  abilityBonus: number;
  proficiency: number;
  itemBonus: number;
  focusCantrips: any[];
  focusSpells: string[];
}

export interface Mods {
  Will: Fortitude;
  Fortitude: Fortitude;
  Reflex: Fortitude;
}

export interface Fortitude {
  "Item Bonus": number;
}

export interface Money {
  cp: number;
  sp: number;
  gp: number;
  pp: number;
}

export interface SpecificProficiencies {
  trained: any[];
  expert: any[];
  master: any[];
  legendary: any[];
}

export interface SpellCaster {
  name: string;
  magicTradition: string;
  spellcastingType: string;
  ability: string;
  proficiency: number;
  focusPoints: number;
  innate: boolean;
  perDay: number[];
  spells: Spell[];
  prepared: any[];
}

export interface Spell {
  spellLevel: number;
  list: string[];
}
